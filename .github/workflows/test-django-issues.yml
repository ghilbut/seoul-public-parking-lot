name: Test django on Issue branch

on:
  push:
    branches:
      - Issue-*
    paths:
      - .github/workflows/test-django-issues.yml
      - django/Pipfile.lock
      - django/src/**

jobs:
  test:
    runs-on: ubuntu-18.04
    env:
      WORKDIR: ./django

    steps:
      - uses: actions/checkout@v2

      - name: Download builder docker image from artifact
        uses: actions/download-artifact@v1
        with:
          name: docker
        working-directory: ${{ env.WORKDIR }}

      - name: Build builder docker image
        run:  |
          if [ -f "docker/django/builder.tar" ]; then
            docker -i docker/django/builder.tar
          fi
          docker build -t builder --target=builder .
          mkdir -p docker/django/
          docker save -o docker/django/builder.tar builder
        working-directory: ${{ env.WORKDIR }}

      - name: Upload builder docker image to artifact
        uses: actions/upload-artifact@v1
        with:
          name: docker
          path: docker/django/builder.tar

      - name: Build test docker image
        run:  docker build -t test --target=test .
        working-directory: ${{ env.WORKDIR }}

      - name: Run MySQL
        run: |
          docker network create mysql
          docker run \
            -d \
            -e MYSQL_ROOT_PASSWORD \
            -e MYSQL_DATABASE \
            -e MYSQL_USER \
            -e MYSQL_PASSWORD \
            -v $(pwd)/db/mysql/data:/var/lib/mysql \
            -v $(pwd)/db/mysql/init:/docker-entrypoint-initdb.d \
            --name mysql \
            --network mysql \
            --rm \
            mysql:5.7 \
            mysql \
            --character-set-server=utf8mb4 \
            --collation-server=utf8mb4_unicode_ci
        env:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: sppl
          MYSQL_USER: sppl
          MYSQL_PASSWORD: spplpw

      - name: Migrate database
        run: |
          docker ps -a
          docker run \
            -e SPPL_LOCAL_DB_HOST \
            --network mysql \
            --rm \
            test \
            ./manage.py makemigrations && \
            ./manage.py migrate
        env:
          SPPL_LOCAL_DB_HOST: mysql

      - name: Run test
        run: |
          docker run \
            -e SPPL_LOCAL_DB_HOST \
            --network mysql \
            --rm \
            test
        env:
          SPPL_LOCAL_DB_HOST: mysql

      - name: Clean
        if: always()
        run: |
          docker stop mysql
          docker network rm mysql
